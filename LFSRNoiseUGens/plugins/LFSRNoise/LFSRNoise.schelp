class:: LFSRNoise
summary:: 32-bit linear feedback shift register (LFSR) noise
related:: Classes/LFClipNoise
categories::  UGens>Generators>Stochastic


Description::

Pseudo-random noise that generates the values -1 or +1 at a rate given by the nearest
integer division of the sample rate by the  code::freq:: argument.

Generates a periodic waveform capable of a range of complex tones from square waves to pseudo-random "pitched" noise.
Probably not great for your speakers at high amplitudes. Very low frequency values will cause lengthy periods of DC offset.

classmethods::

method::ar, kr

argument::freq
Approximate rate at which to generate values.

argument::fbPos
Bitwise index (1-31) to insert new values. Related to LFSR cycle period.

argument::continue
Integer value (0-1) that determines whether the state of the LFSR resets when code::fbPos:: changes or not.

argument::resetType
Integer value (0-1) that determines whether only the first code::fbPos:: bits or all 32 bits of the LFSR's internal value are set when the UGen resets.

argument::mul
Output will be multiplied by this value.

argument::add
This value will be added to the output.

discussion::
To produce a pseudo-random number sequence, the noise generator performs a bitwise XOR on the two least-significant bits of a 32-bit integer, shifts all bits one position to the right, and inserts the result of the XOR at the index given by the  code::fbPos:: argument. The UGen's output is the right-most bit (LSB) of the integer, scaled to Â±1.

Because the state of the LFSR must always be a non-zero integer to produce new values, the UGen resets its internal integer value every time it reaches zero. If code::resetType:: is 1, all bits are 1 after the reset. If code::resetType:: is 0 only the first code::n:: bits where code::n = fbPos:: are set.

If code::continue:: is 0, the integer value is also reset every time code::fbPos:: changes.

Note that, in general, the period length of the LFSR increases as the index value (code::fbPos::) increases.

Examples::

code::

//defaults
{LFSRNoise.ar(500, 14)}.play;

//modulate frequency
{LFSRNoise.ar(XLine.kr(1000, 10000, 10, 1, 0, 2), 14)}.play;

//modulate fbPos (notice the difference the continue argument makes)
{LFSRNoise.ar(SampleRate.ir * 0.25, Duty.kr(0.25, 0, Dseq((1..31), 1), 2), 1 )}.play;
{LFSRNoise.ar(SampleRate.ir * 0.25, Duty.kr(0.25, 0, Dseq((1..31), 1), 2), 0 )}.play;

//mouse freq
{LFSRNoise.ar( MouseX.kr(0.001, 1, 1) * SampleRate.ir )}.play;

//mouse fbPos
{LFSRNoise.ar( 10000, MouseY.kr(1, 31), 1)}.play;
{LFSRNoise.ar( 10000, MouseY.kr(1, 31), 0)}.play;

//compare continue values
{LFSRNoise.ar( MouseX.kr(0.001, 1, 1) * SampleRate.ir, MouseY.kr(1, 31), 1)}.play; //default
{LFSRNoise.ar( MouseX.kr(0.001, 1, 1) * SampleRate.ir, 0)}.play;

//mouse reign supreme
{var trig = MouseButton.kr(0, 1, 0); LFSRNoise.ar( MouseX.kr(0.001, 1, 1) * SampleRate.ir, MouseY.kr(1, 31), ToggleFF.kr(\init.tr(1) + trig).poll(\init.tr + trig, label: \continue))}.play;

//use as a frequency control
{SinOsc.ar(LFSRNoise.kr(10, 3, 1, 0, 200, 600) )}.play;


(
SynthDef(\help_LFSRNoise, {|out = 0, freq = 440, fbPos = 14, amp = 1.0, continue = 0, reset = 1, pan = 0|
    var sig = LFSRNoise.ar(freq, fbPos, continue, reset);
    var env = Env.asr(SampleDur.ir, 1, SampleDur.ir).kr(2, 1);
    sig = LeakDC.ar(sig);
    sig = sig * env * amp;
    sig = Pan2.ar(sig, pan);
    Out.ar(out, sig);
}).add;
)

//8 bit rave
(
t = TempoClock(3);
p = {|pattern| Pdup(Prand([4,5], inf), pattern)};
PmonoArtic(
    \help_LFSRNoise,
    \amp, 1,
    \dur, p.(Prand([0.25, 0.5], inf)),
    \freq, p.(Pexprand(1, 40) * 500),
    \fbPos, p.(Pexprand(3, 31)),
    \reset, p.(Pwhite(0,1)),
    \continue, p.(Pwhite(0,1)),
    \pan, p.(Pwhite(0,1)),
).play(t);
)

//bass line oscillator
(
t = TempoClock(2.5);
PmonoArtic(
    \help_LFSRNoise,
    \dur, Prand([Pseq(0.5!2), Pseq([1]), Pseq(0.25!4)], inf),
    \scale, Scale.at(\minorPentatonic),
    \degree, Pwhite(0,10),
    \octave, 6,
    \fbPos, 4,
    \amp, Pwhite(0.8, 1.0)
).play(t);
)

//vweep vwoip brrr
(
PmonoArtic(
    \help_LFSRNoise,
    \dur, 0.5,
    \freq, Pexprand(10000.0, 20000.0),
    \continue, 0,
    \fbPos, Pwhite(6, 31),
    \amp, Pwhite(0.8, 1.0),
    \legato, 1
).play;
)

::
